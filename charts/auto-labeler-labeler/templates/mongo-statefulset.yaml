apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: auto-labeler-mongo
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "auto-labeler-labeler.labels" . | nindent 4 }}
spec:
  serviceName: auto-labeler-mongo
  replicas: 1
  selector:
    matchLabels:
      app: auto-labeler-mongo
  template:
    metadata:
      labels:
        app: auto-labeler-mongo
    spec:
      {{- $mongoSecret := (or .Values.mongo.auth.existingSecret .Values.backend.mongoSecretName) | default "auto-labeler-mongo" }}
      containers:
        - name: mongo
          image: "{{ .Values.mongo.image.repository }}:{{ .Values.mongo.image.tag }}"
          imagePullPolicy: {{ .Values.mongo.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.mongo.service.port }}
              name: mongo
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $mongoSecret }}
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $mongoSecret }}
                  key: password
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
          resources:
            {{- toYaml .Values.mongo.resources | nindent 12 }}
      {{- if not .Values.mongo.persistence.enabled }}
      volumes:
        - name: mongo-data
          emptyDir: {}
      {{- end }}
  {{- if .Values.mongo.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: mongo-data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.mongo.persistence.storageClass }}
        storageClassName: {{ .Values.mongo.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.mongo.persistence.size }}
  {{- end }}
